function pretty(n) {
    var t, r = n[0].toUpperCase(), e = n[1], i = n[2], a = n.slice(3), o = r + e;
    return i ? (t = o + "-KP" + i, a.length ? t + "-" + a.join("-") : t) : o;
}

function pvalues(n) {
    var t = strs(n, INPUT_RE);
    return [ t[0], t[1] ].concat(t[2].replace(REPLACE_RE, "").split(""));
}

function pos(n) {
    var t, r, e, i, a = n[0], o = n[1], u = n.slice(2), p = parseInt(a, 36) - 10, l = parseInt(o) - 1, s = u.map(function(n) {
        return parseInt(n);
    }).map(function(n) {
        return [ KP_MAP[n - 1][0], KP_MAP[n - 1][1] ];
    }).map(function(n, t) {
        var r = Math.pow(1 / 3, t + 1);
        return [ n[0] * r, n[1] * r ];
    });
    s.length ? (t = s.map(function(n) {
        return n[0];
    }), r = s.map(function(n) {
        return n[1];
    }), e = t.reduce(function(n, t) {
        return n + t;
    }), i = r.reduce(function(n, t) {
        return n + t;
    })) : (e = 0, i = 0);
    var c = p + e, M = l + i, I = Math.pow(1 / 3, s.length);
    return console.log(I), [ c * GRID_SIZE, M * GRID_SIZE, I * GRID_SIZE ];
}

function dist(n, t) {
    var r = n[0], e = n[1], i = n[2], a = t[0], o = t[1], u = t[2];
    return [ Math.hypot(a - r, o - e), Math.hypot(i, u) ];
}

var strType = 2, GRID_SIZE = 300, MAX_DIST = 1350, MAX_MIL = 1570, PRECISION = 1, KP_MAP = [ [ 0, 2 ], [ 1, 2 ], [ 2, 2 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ], INPUT_RE = /^([a-z])([12][0-9](?=(?:[k\s-]))|[1-9])((?:(?:\s+|-)?(?:kp?)?[1-9])*)(?:\s|-)?(?:kp?)?$/i, REPLACE_RE = /[^1-9]/g, MIN_ATOM = {}, MAX_ATOM = {}, MIN_X = 50, MAX_X = 1250, MIN_Y = 1579, MAX_Y = 800, C = [ [ 50, 1579 ], [ 100, 1558 ], [ 150, 1538 ], [ 200, 1517 ], [ 250, 1496 ], [ 300, 1475 ], [ 350, 1453 ], [ 400, 1431 ], [ 450, 1409 ], [ 500, 1387 ], [ 550, 1364 ], [ 600, 1341 ], [ 650, 1317 ], [ 700, 1292 ], [ 750, 1267 ], [ 800, 1240 ], [ 850, 1212 ], [ 900, 1183 ], [ 950, 1152 ], [ 1e3, 1118 ], [ 1050, 1081 ], [ 1100, 1039 ], [ 1150, 988 ], [ 1200, 918 ], [ 1250, 800 ] ], DR = 180 / Math.PI, interpolator = function(n) {
    if (n < MIN_X) return MIN_ATOM;
    if (n > MAX_X) return MAX_ATOM;
    var t, r, e, i, a, o, u, p, l, s;
    for (t = 0; t < C.length; t++) {
        if (r = C[t], e = C[t + 1], i = r[0], a = r[1], n === i) return a;
        if (!((o = e[0]) <= n)) return u = e[1], p = o - i, l = u - a, s = n - i, Math.round(l / p * s + a);
    }
}, milradian = function(n) {
    return C.map(function(t, r) {
        return t * Math.pow(n, r);
    }).reduce(function(n, t) {
        return n + t;
    });
}, heading = function(n, t) {
    var r = n[0], e = n[1], i = t[0], a = t[1], o = i - r, u = a - e, p = Math.hypot(o, u), l = o / p, s = u / p, c = Math.atan2(s, l), M = c * DR;
    return 0 === l && 1 === s ? 180 : i > r && a >= e ? M + 90 : i >= r && a < e ? M + 90 : i < r && a >= e ? M + 90 : i <= r && a < e ? 180 - Math.abs(M) + 270 : void 0;
}, tl = function(n) {
    return [ n[0], n[1] ];
}, tr = function(n) {
    return [ n[0] + n[2], n[1] ];
}, br = function(n) {
    return [ n[0] + n[2], n[1] + n[2] ];
}, bl = function(n) {
    return [ n[0], n[1] + n[2] ];
}, pcontains = function(n, t, r) {
    return n[0] < r[0] && t[0] > r[0] && n[1] < r[1] && t[1] > r[1];
}, contains = function(n, t, r, e) {
    return pcontains(n, t, r) || pcontains(n, t, [ e[0], r[1] ]) || pcontains(n, t, e) || pcontains(n, t, [ r[0], e[1] ]);
}, bearingwc = function(n, t) {
    var r, e = n[0], i = n[1], a = t[0], o = t[1], u = [ e + n[2], i + n[2] ], p = [ a + t[2], o + t[2] ], l = a - e, s = o - i;
    if (e === a && i === o || contains(n, u, t, p) || contains(t, p, n, u)) return null;
    return 0 === l && s < 0 ? (1, r = [ [ tr(n), bl(t) ], [ tl(n), br(t) ] ]) : l > 0 && s < 0 ? (2, 
    r = [ [ br(n), tl(t) ], [ tl(n), br(t) ] ]) : l > 0 && 0 === s ? (3, r = [ [ br(n), tl(t) ], [ tr(n), bl(t) ] ]) : l > 0 && s > 0 ? (4, 
    r = [ [ bl(n), tr(t) ], [ tr(n), bl(t) ] ]) : 0 === l && s > 0 ? (5, r = [ [ bl(n), tr(t) ], [ br(n), tl(t) ] ]) : l < 0 && s > 0 ? (6, 
    r = [ [ tl(n), br(t) ], [ br(n), tl(t) ] ]) : l < 0 && 0 === s ? (7, r = [ [ tl(n), br(t) ], [ bl(n), tr(t) ] ]) : (8, 
    r = [ [ tr(n), bl(t) ], [ bl(n), tr(t) ] ]), [ heading(r[0][0], r[0][1]), heading(r[1][0], r[1][1]) ];
}, strs = function(n, t) {
    return n.match(t).slice(1);
}, i1el = document.getElementById("i1"), i2el = document.getElementById("i2"), oel = document.getElementById("output"), p1el = document.getElementById("p1"), p2el = document.getElementById("p2"), minMaxStr = function(n, t) {
    return n = n === MAX_ATOM ? MAX_Y : n, t = t === MIN_ATOM ? MIN_Y : t, "(min: " + (n = n < 0 ? 0 : n) + ", max: " + t + ")";
}, update = function() {
    var n, t;
    try {
        var r, e, i, a, o = i1el.value, u = i2el.value, p = !1, l = !1;
        try {
            r = pvalues(o), i = pos(r), n = pretty(r);
        } catch (n) {
            p = !0;
        }
        try {
            e = pvalues(u), a = pos(e), t = pretty(e);
        } catch (n) {
            l = !0;
        }
        if (console.log(p, l), p || l) throw new Error();
        var s, c = dist(i, a), M = c[0], I = c[1], f = M.toFixed(PRECISION), d = M - I, g = M + I, h = d.toFixed(PRECISION), _ = g.toFixed(PRECISION), b = interpolator(g), m = interpolator(M), A = interpolator(d), E = M ? parseInt(heading(i, a)) : 0, v = bearingwc(i, a);
        s = m !== MIN_ATOM && m !== MAX_ATOM ? m + "</strong> <span>" + minMaxStr(b, A) + "</span>" : m === MAX_ATOM ? "Out of Range</strong>" : "Too Close</strong>";
        var T;
        v ? (v[0] = Math.floor(v[0]) % 360, v[1] = Math.ceil(v[1]) % 360, T = E + " degrees</strong> <span>" + minMaxStr(v[0], v[1]) + "</span>") : T = E + " degrees</strong> <span>(high error)</span>";
        var R = "Distance: <strong>" + f + "m</strong> <span>" + minMaxStr(h, _) + "</span>", P = "Milliradian: <strong>" + s, y = "Bearing: <strong>" + T;
        oel.innerHTML = R + "<br>" + P + "<br>" + y, p1el.innerHTML = "<pre>" + n + "</pre>", 
        p2el.innerHTML = "<pre>" + t + "</pre>";
    } catch (r) {
        oel.innerHTML = "&nbsp;<br>&nbsp;<br>&nbsp;", p1el.innerHTML = n ? "<pre>" + n + "</pre>" : "", 
        p2el.innerHTML = t ? "<pre>" + t + "</pre>" : "";
    }
}, ilistener = function(n) {
    update();
};

i1el.addEventListener("input", ilistener), i2el.addEventListener("input", ilistener);