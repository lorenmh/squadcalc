function pos(e) {
    var t;
    switch (strType) {
      case 1:
        t = RE_1;
        break;

      case 2:
        t = RE_2;
        break;

      case 3:
        t = RE_3;
        break;

      case 4:
        t = RE_4;
    }
    var n = strs(e, t), a = !0, r = !0;
    void 0 === n[3] && (r = !1, void 0 === n[2] && (a = !1));
    var i = parseInt(n[0], 36) - 10, s = parseInt(n[1]) - 1, d = parseInt(n[2]) - 1, p = parseInt(n[3]) - 1, u = a ? KP_MAP[d][0] / 3 : 0, o = a ? KP_MAP[d][1] / 3 : 0, l = r ? KP_MAP[p][0] / 9 : 0, c = r ? KP_MAP[p][1] / 9 : 0, E = i + u + l, I = s + o + c, P = 0;
    return P = a || r ? r ? 1 / 9 : 1 / 3 : 1, [ E * GRID_SIZE, I * GRID_SIZE, P * GRID_SIZE ];
}

function dist(e, t) {
    var n = e[0], a = e[1], r = e[2], i = t[0], s = t[1], d = t[2];
    return [ Math.hypot(i - n, s - a), Math.hypot(r, d) ];
}

var strType = 2, GRID_SIZE = 300, PRECISION = 1, KP_MAP = [ [ 0, 0 ], [ 1, 0 ], [ 2, 0 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 2 ] ], RE_1 = /^([A-Za-z])([1-9]|1[0-9])(?:\-[Kk][Pp]?(\d)(?:\-(\d))?)?$/, RE_2 = /^([A-Za-z])([1-9]|1[0-9])(?:[Kk][Pp]?(\d)(\d)?)?$/, RE_3 = /^([A-Za-z])([1-9]|1[0-9])(?:\s+(\d)(\d)?)?$/, RE_4 = /^([A-Za-z])([1-9]|1[0-9])(?:\s+(\d)(?:\s+(\d))?)?$/, C = [ 1611.342362585303, -.780011423446922, .0036687139521660583, -16450984941129843e-21, 3.7604744170742065e-8, -4.596546039859563e-11, 2.847194494843758e-14, -7.04244419393223e-18 ], PR = 180 * Math.PI, EX1 = "A1-KP1-1", EX2 = "A1K11", EX3 = "A1 1 1", EX4 = "A1 11", milradian = function(e) {
    return C.map(function(t, n) {
        return t * Math.pow(e, n);
    }).reduce(function(e, t) {
        return e + t;
    });
}, heading = function(e, t) {
    return (Math.atan2(t[1] - e[1], t[0] - e[0]) * (180 / Math.PI) + 360) % 360;
}, strs = function(e, t) {
    return e.match(t).slice(1);
}, i1el = document.getElementById("i1"), i2el = document.getElementById("i2"), sel = document.getElementById("type"), oel = document.getElementById("output"), update = function() {
    try {
        var e = i1el.value, t = i2el.value, n = pos(e), a = pos(t), r = dist(n, a), i = r[0], s = r[1], d = i.toFixed(PRECISION), p = "(+/- " + s.toFixed(PRECISION) + ")", u = parseInt(milradian(i)), o = parseInt(heading(n, a)), l = d + " " + p + " meters", c = "Milliradian: " + u + ", Compass: " + o;
        oel.innerHTML = l + "<br>" + c;
    } catch (e) {
        oel.innerHTML = "&nbsp;<br>&nbsp;";
    }
}, ilistener = function(e) {
    update();
}, updateph = function() {
    var e;
    switch (strType) {
      case 1:
        e = EX1;
        break;

      case 2:
        e = EX2;
        break;

      case 3:
        e = EX3;
        break;

      case 4:
        e = EX4;
    }
    i1el.setAttribute("placeholder", "Position 1 (ex: '" + e + "')"), i2el.setAttribute("placeholder", "Position 2 (ex: '" + e + "')");
}, slistener = function(e) {
    strType = parseInt(sel.value), updateph(), update();
};

i1el.addEventListener("input", ilistener), i2el.addEventListener("input", ilistener), 
sel.addEventListener("change", slistener), updateph();